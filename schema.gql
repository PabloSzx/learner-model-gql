schema {
  query: Query
  mutation: Mutation
}

type Query {
  currentUser: User
  hello: String!
  admin: AdminQueries!
  data: Action!
  topics(ids: [IntID!]!): [Topic!]!
  domain(id: IntID!): Domain
  projects(ids: [IntID!]!): [Project!]!
  domains(ids: [IntID!]!): [Domain!]!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

"""
ID that parses as non-negative integer, serializes to string, and can be passed as string or number
"""
scalar IntID

enum UserRole {
  ADMIN
  USER
}

type User {
  id: IntID!
  enabled: Boolean!
  email: String!
  name: String
  locked: Boolean!
  active: Boolean!
  lastOnline: DateTime
  role: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
  groups: [Group!]!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

interface Connection {
  pageInfo: PageInfo
}

input CursorConnectionArgs {
  first: NonNegativeInt
  after: IntID
  last: NonNegativeInt
  before: IntID
}

type Mutation {
  admin: AdminMutations!
}

type Group {
  id: IntID!
  code: String!
  label: String!
  users: [User!]!
  projects: [Project!]!
}

type Project {
  id: IntID!
  domains: [Domain!]!
  code: String!
  label: String!
}

type UsersConnection {
  nodes: [User!]!
  pageInfo: PageInfo!
}

type AdminQueries {
  allUsers(pagination: CursorConnectionArgs!): UsersConnection!
  allTopics(pagination: CursorConnectionArgs!): TopicsConnection!
  allDomains(pagination: CursorConnectionArgs!): DomainsConnection!
  allProjects: [Project!]!
}

type AdminMutations {
  assignProjectsToUsers(projectIds: [IntID!]!, userIds: [IntID!]!): [User!]!
  unassignProjectsToUsers(projectIds: [IntID!]!, userIds: [IntID!]!): [User!]!
  createDomain(input: CreateDomain!): Domain!
  createTopic(input: CreateTopic!): Topic!
  updateTopic(input: UpdateTopic!): Topic!
  createProject(data: CreateProject!): Project!
}

type Verb {
  id: ID!
  name: String!
}

type Activity {
  contentID: ID
  domainID: ID
  stepID: ID
  hintID: ID
  amount: Float
  detail: String
  extra: JSONObject
}

type Action {
  id: ID!
  verb: Verb!
  activity: Activity!
  timestamp: Timestamp!
  result: Float
}

type Content {
  id: IntID!
  json: JSONObject
}

type Topic {
  id: IntID!
  domain: Domain!
  parent: Topic
  childrens: [Topic!]!
  project: Project!
}

type Domain {
  id: IntID!
  topics: [Topic!]!
  project: Project!
}

type TopicsConnection implements Connection {
  nodes: [Topic!]!
  pageInfo: PageInfo
}

type DomainsConnection implements Connection {
  nodes: [Domain!]!
  pageInfo: PageInfo
}

input CreateDomain {
  code: String!
  label: String!
  projectId: IntID!
}

input CreateTopic {
  code: String!
  label: String!
  parentTopicId: IntID
  domainId: IntID!
  projectId: IntID!
}

input UpdateTopic {
  id: IntID!
  code: String!
  label: String!
  parentTopicId: IntID
  domainId: IntID!
  projectId: IntID!
}

input CreateProject {
  code: String!
  label: String!
}
