schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  hello: String!
  admin: AdminQueries!
  currentUser: User
  adminActions: AdminActionQueries!
  adminContent: AdminContentQueries!
  domains(ids: [IntID!]!): [Domain!]!
  topics(ids: [IntID!]!): [Topic!]!
  content(ids: [IntID!]!): [Content!]!
  projects(ids: [IntID!]!): [Project!]!
}

type Mutation {
  admin: AdminMutations!
  action(data: ActionInput!): Void
  adminContent: AdminContentMutations!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

"""
Represents NULL values
"""
scalar Void

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
ID that parses as non-negative integer, serializes to string, and can be passed as string or number
"""
scalar IntID

type Group {
  id: IntID!
  code: String!
  label: String!
  users: [User!]!
  projects: [Project!]!
}

type Project {
  id: IntID!
  domains: [Domain!]!
  code: String!
  label: String!
}

enum UserRole {
  ADMIN
  USER
}

type User {
  id: IntID!
  enabled: Boolean!
  email: String!
  name: String
  locked: Boolean!
  active: Boolean!
  lastOnline: DateTime
  role: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
  groups: [Group!]!
  projects: [Project!]!
}

type UsersConnection {
  nodes: [User!]!
  pageInfo: PageInfo!
}

type AdminQueries {
  allUsers(pagination: CursorConnectionArgs!): UsersConnection!
  allTopics(pagination: CursorConnectionArgs!): TopicsConnection!
  allDomains(pagination: CursorConnectionArgs!): DomainsConnection!
  allProjects: [Project!]!
}

type AdminMutations {
  assignProjectsToUsers(projectIds: [IntID!]!, userIds: [IntID!]!): [User!]!
  unassignProjectsToUsers(projectIds: [IntID!]!, userIds: [IntID!]!): [User!]!
  createDomain(input: CreateDomain!): Domain!
  createTopic(input: CreateTopic!): Topic!
  updateTopic(input: UpdateTopic!): Topic!
  createProject(data: CreateProject!): Project!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

interface Node {
  id: IntID!
}

interface Connection {
  pageInfo: PageInfo
}

input CursorConnectionArgs {
  first: NonNegativeInt
  after: IntID
  last: NonNegativeInt
  before: IntID
}

type Subscription {
  hello: String!
}

type ActionVerb {
  id: IntID!
  name: String!
}

type Content {
  id: IntID!
  description: String!
  binaryBase64: String
  json: JSONObject
  url: String
  createdAt: DateTime!
  updatedAt: DateTime!
  domain: Domain!
  project: Project!
}

type Domain {
  id: IntID!
  content(pagination: CursorConnectionArgs!): ContentConnection!
  topics: [Topic!]!
  project: Project!
}

type Topic {
  id: IntID!
  content(pagination: CursorConnectionArgs!): ContentConnection!
  domain: Domain!
  parent: Topic
  childrens: [Topic!]!
  project: Project!
}

type ActionActivity {
  id: IntID!
  content: Content
  topic: Topic
  stepID: ID
  hintID: ID
  amount: Float
  detail: String
  extra: JSONObject
}

input ActionActivityInput {
  contentID: IntID
  topicID: IntID
  stepID: ID
  hintID: ID
  amount: Float
  detail: String
  extra: JSONObject
}

input ActionInput {
  activity: ActionActivityInput!
  verbName: String!
  timestamp: Timestamp!
  projectId: IntID!
}

type Action {
  id: IntID!
  verb: ActionVerb!
  activity: ActionActivity!
  timestamp: Timestamp!
  result: Float
  user: User
}

type ActionsConnection {
  nodes: [Action!]!
  pageInfo: PageInfo!
}

type AdminActionQueries {
  allActions(pagination: CursorConnectionArgs!): ActionsConnection!
}

input CreateContent {
  description: String!
  projectId: IntID!
  domainId: IntID!
  topicId: IntID
  binaryBase64: String
  json: JSONObject
  url: String
}

type ContentConnection implements Connection {
  nodes: [Content!]!
  pageInfo: PageInfo!
}

type AdminContentMutations {
  createContent(data: CreateContent!): Content!
}

type AdminContentQueries {
  allContent(pagination: CursorConnectionArgs!): ContentConnection!
}

type TopicsConnection implements Connection {
  nodes: [Topic!]!
  pageInfo: PageInfo
}

type DomainsConnection implements Connection {
  nodes: [Domain!]!
  pageInfo: PageInfo
}

input CreateDomain {
  code: String!
  label: String!
  projectId: IntID!
}

input CreateTopic {
  code: String!
  label: String!
  parentTopicId: IntID
  domainId: IntID!
  projectId: IntID!
}

input UpdateTopic {
  id: IntID!
  code: String!
  label: String!
  parentTopicId: IntID
  domainId: IntID!
  projectId: IntID!
}

input CreateProject {
  code: String!
  label: String!
}
