schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"Admin Project-Related Mutations"
type AdminProjectsMutations {
  "Create a new project entity"
  createProject(data: CreateProject!): Project!
  "Update an existent project entity"
  updateProject(data: UpdateProject!): Project!
}

"Admin Project-Related Queries"
type AdminProjectsQueries {
  """
  Get all the projects currently in the system
  """
  allProjects(pagination: CursorConnectionArgs!): ProjectsConnection!
}

"Pagination Interface"
interface Connection {
  "Pagination information"
  pageInfo: PageInfo!
}

"Content entity"
type Content {
  "Unique numeric identifier"
  id: IntID!
  "Project associated with the content"
  project: Project!
}

"Project creation input data"
input CreateProject {
  "Unique string identifier"
  code: String!
  "Domains associated with project"
  domains: [IntID!]!
  "Human readable identifier"
  label: String!
}

"""
Pagination parameters

Forward pagination parameters can't be mixed with Backward pagination parameters simultaneously

first & after => Forward Pagination

last & before => Backward Pagination
"""
input CursorConnectionArgs {
  """
  Set the minimum boundary

  Use the "endCursor" field of "pageInfo"
  """
  after: IntID
  """
  Set the maximum boundary

  Use the "startCursor" field of "pageInfo"
  """
  before: IntID
  """
  Set the limit of nodes to be fetched

  It can't be more than 50
  """
  first: NonNegativeInt
  """
  Set the limit of nodes to be fetched

  It can't be more than 50
  """
  last: NonNegativeInt
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"Domain entity"
type Domain {
  "Unique numeric identifier"
  id: IntID!
  "Projects associated with the domain"
  projects: [Project!]!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""
Group Entity

- Used to group/cluster users
- Set permissions flags to the users
- Associate projects to users, allowing users to access the projects
"""
type Group {
  "Unique numeric identifier"
  id: IntID!
  "Projects associated with the group"
  projects: [Project!]!
}

"""
ID that parses as non-negative integer, serializes to string, and can be passed as string or number
"""
scalar IntID

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
  Admin related project mutations, only authenticated users with the role "ADMIN" can access
  """
  adminProjects: AdminProjectsMutations!
  "Returns 'Hello World!'"
  hello: String!
}

"Minimum Entity Information"
interface Node {
  "Unique numeric identifier"
  id: IntID!
}

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

"Order ascendingly or descendingly"
enum ORDER_BY {
  ASC
  DESC
}

"Paginated related information"
type PageInfo {
  "Cursor parameter normally used for forward pagination"
  endCursor: String
  """
  Utility field that returns "true" if a next page can be fetched
  """
  hasNextPage: Boolean!
  """
  Utility field that returns "true" if a previous page can be fetched
  """
  hasPreviousPage: Boolean!
  "Cursor parameter normally used for backward pagination"
  startCursor: String
}

"Project entity"
type Project {
  "Unique string identifier"
  code: String!
  "Date of creation"
  createdAt: DateTime!
  "Unique numeric identifier"
  id: IntID!
  "Human readable identifier"
  label: String!
  "Date of last update"
  updatedAt: DateTime!
}

"Paginated Projects"
type ProjectsConnection implements Connection {
  "Nodes of the current page"
  nodes: [Project!]!
  "Pagination related information"
  pageInfo: PageInfo!
}

type Query {
  "Project related administration queries"
  adminProjects: AdminProjectsQueries!
  """
  Get all the content associated with the specified identifiers

  The content data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  content(ids: [IntID!]!): [Content!]!
  """
  Get all the domains associated with the specified identifiers

  The domains data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  domains(ids: [IntID!]!): [Domain!]!
  """
  Get all the groups associated with the specified identifiers

  The groups data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  groups(ids: [IntID!]!): [Group!]!
  "Returns 'Hello World!'"
  hello: String!
  """
  Get specified project by either "id" or "code".

  - If user is not authenticated it will always return NULL.
  - If authenticated user has no permissions on the specified project it returns NULL.
  """
  project(code: String, id: IntID): Project
  """
  Get all the projects associated with the specified identifiers

  The projects data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  projects(ids: [IntID!]!): [Project!]!
  """
  Get all the topics associated with the specified identifiers

  The topics data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  topics(ids: [IntID!]!): [Topic!]!
  """
  Get all the users associated with the specified identifiers

  The users data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  users(ids: [IntID!]!): [User!]!
}

type Subscription {
  "Emits 'Hello World1', 'Hello World2', 'Hello World3', 'Hello World4' and 'Hello World5'"
  hello: String!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"Topic entity"
type Topic {
  "Unique numeric identifier"
  id: IntID!
  "Project associated with the topic"
  project: Project!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"Project update input data"
input UpdateProject {
  "Unique string identifier"
  code: String!
  "Domains associated with project"
  domains: [IntID!]!
  "Current project identifier"
  id: IntID!
  "Human readable identifier"
  label: String!
}

"User entity"
type User {
  "Unique numeric identifier"
  id: IntID!
  "Projects associated with the user"
  projects: [Project!]!
}

"""
Represents NULL values
"""
scalar Void
