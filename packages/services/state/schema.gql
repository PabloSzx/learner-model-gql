schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"Admin State-Related Queries"
type AdminStateQueries {
  """
  Get all the model states creators currently in the system
  """
  allModelStateCreators(
    pagination: CursorConnectionArgs!
  ): ModelStateCreatorConnection!
  """
  Get all the model statestypes currently in the system
  """
  allModelStateTypes(
    pagination: CursorConnectionArgs!
  ): ModelStateTypeConnection!
  """
  Get all the model states currently in the system

  Pagination parameters are mandatory, but filters and orderBy are optional, and therefore the search can be customized.
  """
  allModelStates(input: ModelStateConnectionInput!): ModelStateConnection!
}

"Pagination Interface"
interface Connection {
  "Pagination information"
  pageInfo: PageInfo!
}

"""
Pagination parameters

Forward pagination parameters can't be mixed with Backward pagination parameters simultaneously

first & after => Forward Pagination

last & before => Backward Pagination
"""
input CursorConnectionArgs {
  """
  Set the minimum boundary

  Use the "endCursor" field of "pageInfo"
  """
  after: IntID
  """
  Set the maximum boundary

  Use the "startCursor" field of "pageInfo"
  """
  before: IntID
  """
  Set the limit of nodes to be fetched

  It can't be more than 50
  """
  first: NonNegativeInt
  """
  Set the limit of nodes to be fetched

  It can't be more than 50
  """
  last: NonNegativeInt
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"Domain entity"
type Domain {
  "Unique numeric identifier"
  id: IntID!
  "Model States associated with domain"
  modelStates(input: ModelStateConnectionInput!): ModelStateConnection!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""
ID that parses as non-negative integer, serializes to string, and can be passed as string or number
"""
scalar IntID

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

"Model State Entity"
type ModelState {
  "Date of creation"
  createdAt: DateTime!
  "Creator of model state"
  creator: String!
  "Domain associated with Model State"
  domain: Domain!
  "Unique numeric identifier"
  id: IntID!
  "Arbitrary JSON Data"
  json: JSON!
  "Type / Category of model state"
  type: String
  "Date of last update"
  updatedAt: DateTime!
  "User associated with Model State"
  user: User!
}

"Paginated Model States"
type ModelStateConnection implements Connection {
  "Nodes of the current page"
  nodes: [ModelState!]!
  "Pagination related information"
  pageInfo: PageInfo!
}

"Pagination parameters of Model States"
input ModelStateConnectionInput {
  "Customize search/filter parameters"
  filters: ModelStateFilter
  "Customize order, by default it orders descendingly by id"
  orderBy: ModelStateOrderBy
  "Pagination-specific parameters"
  pagination: CursorConnectionArgs!
}

"Creators of Model States"
type ModelStateCreator {
  "Date of creation"
  createdAt: DateTime!
  "Unique numeric identifier"
  id: IntID!
  name: String!
  "Date of last update"
  updatedAt: DateTime!
}

"Paginated Model State Creators"
type ModelStateCreatorConnection implements Connection {
  "Nodes of the current page"
  nodes: [ModelStateCreator!]!
  "Pagination related information"
  pageInfo: PageInfo!
}

"Filter model states data"
input ModelStateFilter {
  """
  Filter by the specified creators

  If the states's creator matches any of the specified creators, the state is included
  """
  creators: [String!]
  """
  Filter by the specified types

  If the state's type matches any of the specified types, the state is included
  """
  type: [String!]
}

"Order Model States"
input ModelStateOrderBy {
  """
  Order the model states ascendingly or descendingly

  Following the cursor pagination's nature, ordering by "id" which should follow the state creation date

  By default the states are ordered descendingly, showing the newer states first
  """
  id: ORDER_BY = DESC
}

"Types/Categories of Model States"
type ModelStateType {
  "Date of creation"
  createdAt: DateTime!
  "Unique numeric identifier"
  id: IntID!
  "Name of the model type"
  name: String!
  "Date of last update"
  updatedAt: DateTime!
}

"Paginated Model State Types"
type ModelStateTypeConnection implements Connection {
  "Nodes of the current page"
  nodes: [ModelStateType!]!
  "Pagination related information"
  pageInfo: PageInfo!
}

type Mutation {
  "Returns 'Hello World!'"
  hello: String!
}

"Minimum Entity Information"
interface Node {
  "Unique numeric identifier"
  id: IntID!
}

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

"Order ascendingly or descendingly"
enum ORDER_BY {
  ASC
  DESC
}

"Paginated related information"
type PageInfo {
  "Cursor parameter normally used for forward pagination"
  endCursor: String
  """
  Utility field that returns "true" if a next page can be fetched
  """
  hasNextPage: Boolean!
  """
  Utility field that returns "true" if a previous page can be fetched
  """
  hasPreviousPage: Boolean!
  "Cursor parameter normally used for backward pagination"
  startCursor: String
}

type Query {
  """
  Admin related state queries, only authenticated users with the role "ADMIN" can access
  """
  adminState: AdminStateQueries!
  """
  Get all the domains associated with the specified identifiers

  The domains data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  domains(ids: [IntID!]!): [Domain!]!
  "Returns 'Hello World!'"
  hello: String!
  """
  Get all the users associated with the specified identifiers

  The users data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  users(ids: [IntID!]!): [User!]!
}

type Subscription {
  "Emits 'Hello World1', 'Hello World2', 'Hello World3', 'Hello World4' and 'Hello World5'"
  hello: String!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"User entity"
type User {
  "Unique numeric identifier"
  id: IntID!
  "Model States associated with user"
  modelStates(input: ModelStateConnectionInput!): ModelStateConnection!
}

"""
Represents NULL values
"""
scalar Void
