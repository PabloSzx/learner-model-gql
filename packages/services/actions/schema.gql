schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"""
User-emitted actions related to system, data mainly used for logging and modeling purposes
"""
type Action {
  "Arbitrary numeric amount"
  amount: Float
  "Related content"
  content: Content
  "Timestamp of the action, set by the database on row creation"
  createdAt: DateTime!
  "Arbitrary string content detail"
  detail: String
  "Arbitrary JSON object data"
  extra: JSONObject
  "Arbitrary hint identifier"
  hintID: ID
  "Unique numeric identifier"
  id: IntID!
  "Related KCs"
  kcs: [KC!]!
  "Arbitrary numeric result"
  result: Float
  "Arbitrary step identifier"
  stepID: ID
  "Timestamp of the action, set by the action emitter"
  timestamp: Timestamp!
  "Related topic"
  topic: Topic
  "User that emitted the action"
  user: User
  "Type of action"
  verb: ActionVerb!
}

"Input of action report"
input ActionInput {
  "Arbitrary numeric amount"
  amount: Float
  """
  Content identifier

  If it's numeric, it points to the "id" property of the content, otherwise, it points to the "code" property.

  Validation of content presence/authorization is made before confirming action
  """
  contentID: ID
  "Arbitrary string content detail"
  detail: String
  "Arbitrary JSON object data"
  extra: JSONObject
  """
  Arbitrary hint identifier
  """
  hintID: ID
  """
  KCs identifiers

  If it's numeric, it points to the "id" property of the content, otherwise, it points to the "code" property.

  Validation of kc presence/authorization is made before confirming action
  """
  kcsIDs: [ID!]
  """
  Identifier of project related to action.

  It's verified based on authenticated user, and attached validated ids are validated against the specified project
  """
  projectId: IntID!
  "Arbitrary numeric result"
  result: Float
  "Arbitrary step identifier"
  stepID: ID
  """
  Timestamp of the action.

  Format in number of milliseconds elapsed since January 1, 1970 00:00:00 UTC
  """
  timestamp: Timestamp!
  """
  Topic identifier

  If it's numeric, it points to the "id" property of the content, otherwise, it points to the "code" property.

  Validation of topic presence/authorization is made before confirming action
  """
  topicID: ID
  """
  Type of action, if specified verb doesn't exist, it's automatically created
  """
  verbName: String!
}

"""
Action Verb

Main action categorization system
"""
type ActionVerb {
  "Unique numeric identifier"
  id: IntID!
  "Name of the verb"
  name: String!
}

"Paginated Actions"
type ActionsConnection implements Connection {
  "Nodes of the current page"
  nodes: [Action!]!
  "Pagination related information"
  pageInfo: PageInfo!
}

"Paginated Actions Verbs"
type ActionsVerbsConnection implements Connection {
  "Nodes of the current page"
  nodes: [ActionVerb!]!
  "Pagination related information"
  pageInfo: PageInfo!
}

"Admin Action-Related Queries"
type AdminActionQueries {
  """
  [ADMIN] Get all the actions currently in the system

  Pagination parameters are mandatory, but filters and orderBy are optional, and therefore the search can be customized.
  """
  allActions(
    filters: AdminActionsFilter
    orderBy: AdminActionsOrderBy
    pagination: CursorConnectionArgs!
  ): ActionsConnection!
  """
  [ADMIN] Get all the action's verbs currently in the system
  """
  allActionsVerbs(pagination: CursorConnectionArgs!): ActionsVerbsConnection!
}

"Filter all actions of admin query"
input AdminActionsFilter {
  """
  Filter by the specified content

  If action's content matches any of the specified content, the action is included
  """
  content: [IntID!]
  """
  Filter by the specified end date

  If action's timestamp is before the specified date, the action is included
  """
  endDate: DateTime
  """
  Filter by the specified KCs

  If any of the action's KCs matches any of the specified KCs, the action is included
  """
  kcs: [IntID!]
  """
  Filter by the specified projects

  If action's project matches any of the specified projects, the action is included
  """
  projects: [IntID!]
  """
  Filter by the specified starting date

  If action's timestamp is after the specified date, the action is included
  """
  startDate: DateTime
  """
  Filter by the specified topics

  If action's topic matches any of the specified topics, the action is included
  """
  topics: [IntID!]
  """
  Filter by the specified users

  If action's user matches any of the specified users, the action is included
  """
  users: [IntID!]
  """
  Filter by the specified verbs

  If action's verb matches any of the specified verbs, the action is included
  """
  verbNames: [String!]
}

"Order Admin Actions"
input AdminActionsOrderBy {
  """
  Order the actions ascendingly or descendingly

  Following the cursor pagination's nature, ordering by "id" tends to follow the action creation date, but it can't be guaranteed

  By default the actions are ordered descendingly, showing the newer actions first
  """
  id: ORDER_BY = DESC
}

"Pagination Interface"
interface Connection {
  "Pagination information"
  pageInfo: PageInfo!
}

"Content entity"
type Content {
  "Unique numeric identifier"
  id: IntID!
}

"""
Pagination parameters

Forward pagination parameters can't be mixed with Backward pagination parameters simultaneously

first & after => Forward Pagination

last & before => Backward Pagination
"""
input CursorConnectionArgs {
  """
  Set the minimum boundary

  Use the "endCursor" field of "pageInfo"
  """
  after: IntID
  """
  Set the maximum boundary

  Use the "startCursor" field of "pageInfo"
  """
  before: IntID
  """
  Set the limit of nodes to be fetched

  It can't be more than 50
  """
  first: NonNegativeInt
  """
  Set the limit of nodes to be fetched

  It can't be more than 50
  """
  last: NonNegativeInt
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"Domain entity"
type Domain {
  "Unique numeric identifier"
  id: IntID!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""
ID that parses as non-negative integer, serializes to string, and can be passed as string or number
"""
scalar IntID

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type KC {
  "Unique numeric identifier"
  id: IntID!
}

type Mutation {
  """
  Report an action to the modeling service

  - User authentication is required
  - Authenticated user has to be associated with specified project
  """
  action(data: ActionInput!): Void
  "Returns 'Hello World!'"
  hello: String!
}

"Minimum Entity Information"
interface Node {
  "Unique numeric identifier"
  id: IntID!
}

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

"Order ascendingly or descendingly"
enum ORDER_BY {
  ASC
  DESC
}

"Paginated related information"
type PageInfo {
  "Cursor parameter normally used for forward pagination"
  endCursor: String
  """
  Utility field that returns "true" if a next page can be fetched
  """
  hasNextPage: Boolean!
  """
  Utility field that returns "true" if a previous page can be fetched
  """
  hasPreviousPage: Boolean!
  "Cursor parameter normally used for backward pagination"
  startCursor: String
}

type Project {
  """
  All actions of the project

  ADMIN User role or "readProjectActions" group permissions flag required
  """
  actions(
    filters: ProjectActionsFilter
    pagination: CursorConnectionArgs!
  ): ActionsConnection!
  "Unique numeric identifier"
  id: IntID!
}

"""
Filter the actions of a project
"""
input ProjectActionsFilter {
  """
  Filter by the specified content

  If action's content matches any of the specified content, the action is included
  """
  content: [IntID!]
  """
  Filter by the specified end date

  If action's timestamp is before the specified date, the action is included
  """
  endDate: DateTime
  """
  Filter by the specified KCs

  If any of the action's KCs matches any of the specified KCs, the action is included
  """
  kcs: [IntID!]
  """
  Filter by the specified starting date

  If action's timestamp is after the specified date, the action is included
  """
  startDate: DateTime
  """
  Filter by the specified topics

  If action's topic matches any of the specified topics, the action is included
  """
  topics: [IntID!]
  """
  Filter by the specified users

  If action's user matches any of the specified users, the action is included
  """
  users: [IntID!]
  """
  Filter by the specified verbs

  If action's verb matches any of the specified verbs, the action is included
  """
  verbNames: [String!]
}

type Query {
  """
  [ADMIN] Admin related actions queries, only authenticated users with the role "ADMIN" can access
  """
  adminActions: AdminActionQueries!
  "Returns 'Hello World!'"
  hello: String!
  """
  Get all the projects associated with the specified identifiers

  The projects data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  projects(ids: [IntID!]!): [Project!]!
}

type Subscription {
  "Emits 'Hello World1', 'Hello World2', 'Hello World3', 'Hello World4' and 'Hello World5'"
  hello: String!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"Topic entity"
type Topic {
  "Unique numeric identifier"
  id: IntID!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"User entity"
type User {
  "Unique numeric identifier"
  id: IntID!
}

"""
Represents NULL values
"""
scalar Void
