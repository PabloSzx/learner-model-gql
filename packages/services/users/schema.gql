schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"Filter all groups of admin query"
input AdminGroupsFilter {
  """
  Tags associated with the group

  Tags can be used to categorize or filter
  """
  tags: [String!]
}

"Admin User-Related Queries"
type AdminUserMutations {
  "Create a new group entity"
  createGroup(data: CreateGroupInput!): Group!
  "Set the projects of the specified users"
  setProjectsToUsers(projectIds: [IntID!]!, userIds: [IntID!]!): [User!]!
  "Set the users (by email) associated with the groups"
  setUserGroups(groupIds: [IntID!]!, usersEmails: [EmailAddress!]!): [Group!]!
  "Update an existent group entity"
  updateGroup(data: UpdateGroupInput!): Group!
  "Update an existent user entity"
  updateUser(data: UpdateUserInput!): User!
  "Upsert specified users with specified projects"
  upsertUsersWithProjects(
    emails: [EmailAddress!]!
    projectsIds: [IntID!]!
  ): [User!]!
}

"Admin User-Related Queries"
type AdminUserQueries {
  """
  Get all the groups currently in the system

  Pagination parameters are mandatory, but filters is optional, and therefore the search can be customized.
  """
  allGroups(
    filters: AdminGroupsFilter
    pagination: CursorConnectionArgs!
  ): GroupsConnection!
  """
  Get all the users currently in the system

  Pagination parameters are mandatory, but filters is optional, and therefore the search can be customized.
  """
  allUsers(
    filters: AdminUsersFilter
    pagination: CursorConnectionArgs!
  ): UsersConnection!
}

"Filter all users of admin query"
input AdminUsersFilter {
  """
  Filter by the specified tags

  If any of the user's tags matches any of the specified tags, the user is included
  """
  tags: [String!]
}

"Pagination Interface"
interface Connection {
  "Pagination information"
  pageInfo: PageInfo!
}

"Group creation input data"
input CreateGroupInput {
  "Unique string identifier"
  code: String!
  "Permissions flags"
  flags: GroupFlagsInput
  "Human readable identifier"
  label: String!
  "Projects associated with the group"
  projectIds: [IntID!]!
  """
  Tags associated with the group

  Tags can be used to categorize or filter
  """
  tags: [String!]!
}

"""
Pagination parameters

Forward pagination parameters can't be mixed with Backward pagination parameters simultaneously

first & after => Forward Pagination

last & before => Backward Pagination
"""
input CursorConnectionArgs {
  """
  Set the minimum boundary

  Use the "endCursor" field of "pageInfo"
  """
  after: IntID
  """
  Set the maximum boundary

  Use the "startCursor" field of "pageInfo"
  """
  before: IntID
  """
  Set the limit of nodes to be fetched

  It can't be more than 50
  """
  first: NonNegativeInt
  """
  Set the limit of nodes to be fetched

  It can't be more than 50
  """
  last: NonNegativeInt
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""
Group Entity

- Used to group/cluster users
- Set permissions flags to the users
- Associate projects to users, allowing users to access the projects
"""
type Group {
  "Unique string identifier"
  code: String!
  "Date of creation"
  createdAt: DateTime!
  "Permissions flags"
  flags: GroupFlags!
  "Unique numeric identifier"
  id: IntID!
  "Human readable identifier"
  label: String!
  "IDs of projects associated with the group"
  projectsIds: [IntID!]!
  """
  Tags associated with the group

  Tags can be used to categorize or filter
  """
  tags: [String!]!
  "Date of last update"
  updatedAt: DateTime!
  "Users associated with the group"
  users: [User!]!
}

"Permissions flags of group"
type GroupFlags {
  "Date of creation"
  createdAt: DateTime!
  "Unique numeric identifier"
  id: IntID!
  "Allows the users part of the group to read all the actions of the projects of the group"
  readProjectActions: Boolean!
  "Allows the users part of the group to read all the model states of the projects of the group"
  readProjectModelStates: Boolean!
  "Date of last update"
  updatedAt: DateTime!
}

"Group Flags input data"
input GroupFlagsInput {
  "Allows the users part of the group to read all the actions of the projects of the group"
  readProjectActions: Boolean!
  "Allows the users part of the group to read all the model states of the projects of the group"
  readProjectModelStates: Boolean!
}

"Paginated Groups"
type GroupsConnection implements Connection {
  "Nodes of the current page"
  nodes: [Group!]!
  "Pagination related information"
  pageInfo: PageInfo!
}

"""
ID that parses as non-negative integer, serializes to string, and can be passed as string or number
"""
scalar IntID

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
  Admin related user mutations, only authenticated users with the role "ADMIN" can access
  """
  adminUsers: AdminUserMutations!
  "Returns 'Hello World!'"
  hello: String!
}

"Minimum Entity Information"
interface Node {
  "Unique numeric identifier"
  id: IntID!
}

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

"Order ascendingly or descendingly"
enum ORDER_BY {
  ASC
  DESC
}

"Paginated related information"
type PageInfo {
  "Cursor parameter normally used for forward pagination"
  endCursor: String
  """
  Utility field that returns "true" if a next page can be fetched
  """
  hasNextPage: Boolean!
  """
  Utility field that returns "true" if a previous page can be fetched
  """
  hasPreviousPage: Boolean!
  "Cursor parameter normally used for backward pagination"
  startCursor: String
}

type Query {
  """
  Admin related user queries, only authenticated users with the role "ADMIN" can access
  """
  adminUsers: AdminUserQueries!
  "Authenticated user information"
  currentUser: User
  """
  Get all the groups associated with the specified identifiers

  The groups data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  groups(ids: [IntID!]!): [Group!]!
  "Returns 'Hello World!'"
  hello: String!
  """
  Get all the users associated with the specified identifiers

  The users data is guaranteed to follow the specified identifiers order

  If any of the specified identifiers is not found or forbidden, query fails
  """
  users(ids: [IntID!]!): [User!]!
}

type Subscription {
  "Emits 'Hello World1', 'Hello World2', 'Hello World3', 'Hello World4' and 'Hello World5'"
  hello: String!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"Group update input data"
input UpdateGroupInput {
  "Unique string identifier"
  code: String!
  "Permissions flags of group"
  flags: GroupFlagsInput
  "Current group identifier"
  id: IntID!
  "Human readable identifier"
  label: String!
  "Projects associated with the group"
  projectIds: [IntID!]!
  """
  Tags associated with the group

  Tags can be used to categorize or filter
  """
  tags: [String!]!
}

"User update input data"
input UpdateUserInput {
  "Current user identifier"
  id: IntID!
  "Locked flag"
  locked: Boolean!
  "Name of person"
  name: String
  "Projects associated with user"
  projectIds: [IntID!]!
  "Role of user"
  role: UserRole!
  """
  Tags associated with the user

  Tags can be used to categorize or filter
  """
  tags: [String!]!
}

"User entity"
type User {
  """
  Active flag

  By default it starts as "false", and the first time the user accesses the system, it's set as "true"
  """
  active: Boolean!
  "Date of creation"
  createdAt: DateTime!
  "Email Address"
  email: String!
  "Groups associated with the user"
  groups: [Group!]!
  "Unique numeric identifier"
  id: IntID!
  "Date of latest user access"
  lastOnline: DateTime
  """
  Locked user authentication

  If set as "true", user won't be able to use the system
  """
  locked: Boolean!
  "Name of person"
  name: String
  "Picture of user, set by external authentication service"
  picture: String
  "IDs of projects associated with the user"
  projectsIds: [IntID!]!
  "User role, by default is USER"
  role: UserRole!
  """
  Tags associated with the user

  Tags can be used to categorize or filter
  """
  tags: [String!]!
  "Date of last update"
  updatedAt: DateTime!
}

"Possible roles of an authenticated user"
enum UserRole {
  """
  Administrator of the system

  Most of the authorization logic is enabled
  """
  ADMIN
  "Default user role"
  USER
}

"Paginated Users"
type UsersConnection implements Connection {
  "Nodes of the current page"
  nodes: [User!]!
  "Pagination related information"
  pageInfo: PageInfo!
}

"""
Represents NULL values
"""
scalar Void
