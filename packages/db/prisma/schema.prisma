datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id   Int       @id @default(autoincrement())
  uids UserUID[]

  enabled Boolean @default(true)

  email   String  @unique
  name    String?
  picture String?

  locked Boolean @default(false)

  active     Boolean   @default(false)
  lastOnline DateTime?

  role UserRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  groups Group[]

  projects Project[]

  actions Action[]

  @@unique([id, enabled])
}

model UserUID {
  uid String @id

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Group {
  id Int @id @default(autoincrement())

  code  String @unique
  label String

  users User[]

  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Project {
  id Int @id @default(autoincrement())

  code  String @unique
  label String

  users  User[]
  groups Group[]

  domains Domain[]
  topics  Topic[]

  content Content[]

  actions Action[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Domain {
  id Int @id @default(autoincrement())

  code  String @unique
  label String

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  content Content[]

  topics Topic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([id, projectId])
}

model Topic {
  id Int @id @default(autoincrement())

  code  String @unique
  label String

  domain   Domain @relation(fields: [domainId], references: [id])
  domainId Int

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  parent    Topic?  @relation("TopicToTopic", fields: [parentId], references: [id])
  parentId  Int?
  childrens Topic[] @relation("TopicToTopic")

  content Content[]

  actionActivities ActionActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([id, projectId])
}

model ActionVerb {
  id Int @id @default(autoincrement())

  name String @unique

  actions Action[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Action {
  id Int @id @default(autoincrement())

  verb     ActionVerb @relation(fields: [verbName], references: [name])
  verbName String

  activity   ActionActivity @relation(fields: [activityId], references: [id])
  activityId Int

  timestamp DateTime

  result Float?

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ActionActivity {
  id Int @id @default(autoincrement())

  action Action?

  content   Content? @relation(fields: [contentId], references: [id])
  contentId Int?

  topic   Topic? @relation(fields: [topicId], references: [id])
  topicId Int?

  stepID String?
  hintID String?

  amount Float?

  detail String?

  extra Json?
}

model Content {
  id Int @id @default(autoincrement())

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  domain   Domain @relation(fields: [domainId], references: [id])
  domainId Int

  topic   Topic? @relation(fields: [topicId], references: [id])
  topicId Int?

  actionActivities ActionActivity[]

  description String

  binary Bytes?
  json   Json?
  url    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
